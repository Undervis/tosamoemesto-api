# Generated by Django 5.1.4 on 2025-01-14 19:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Addition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('primary', models.BooleanField(default=False, verbose_name='Основной адрес')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='attachments', verbose_name='Файл')),
                ('type', models.IntegerField(choices=[(0, 'IMAGE'), (1, 'VIDEO')], default=0, verbose_name='Тип вложения')),
            ],
            options={
                'verbose_name': 'Вложение',
                'verbose_name_plural': 'Вложения',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('image', models.ImageField(upload_to='banner_images', verbose_name='Изображение')),
                ('status', models.IntegerField(choices=[(1, 'ACTIVE'), (0, 'INACTIVE'), (2, 'POSTPONED')], verbose_name='Статус')),
                ('show_date_start', models.DateTimeField(blank=True, null=True, verbose_name='Дата начала отображения')),
                ('show_date_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания отображения')),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеры',
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='images/food_category')),
            ],
        ),
        migrations.CreateModel(
            name='AdditionEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=1)),
                ('addition', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.addition')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user_photo')),
                ('birthday', models.DateField(blank=True, null=True)),
                ('phone', models.CharField(max_length=11)),
                ('status', models.IntegerField(choices=[(1, 'ACTIVE'), (0, 'INACTIVE'), (2, 'BANNED')], default=0, verbose_name='Статус пользователя')),
                ('ban_reason', models.TextField(blank=True, null=True, verbose_name='Причина блокировки')),
                ('ban_experienced_at', models.DateTimeField(blank=True, null=True)),
                ('has_discount_card', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('addresses', models.ManyToManyField(to='main.address')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dialogue_with', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialogue_with', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiscountCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('min_order_price', models.FloatField(blank=True, default=None, null=True, verbose_name='Минимальная цена заказа')),
                ('min_order_weight', models.FloatField(blank=True, default=None, null=True, verbose_name='Минимальный вес заказа')),
                ('food_size', models.IntegerField(blank=True, choices=[(0, 'SMALL'), (1, 'MEDIUM'), (2, 'LARGE')], null=True)),
                ('discount_card', models.BooleanField(blank=True, default=False, null=True, verbose_name='Карта лояльности')),
                ('birthday', models.BooleanField(blank=True, default=False, null=True, verbose_name='День рождения')),
                ('ordering_time_start', models.TimeField(blank=True, null=True, verbose_name='Начало периода времени заказа')),
                ('ordering_time_end', models.TimeField(blank=True, null=True, verbose_name='Окончание периода времени заказа')),
                ('user_role', models.ManyToManyField(blank=True, default=None, to=settings.AUTH_USER_MODEL, verbose_name='Роли пользователей')),
            ],
            options={
                'verbose_name': 'Условие акции',
                'verbose_name_plural': 'Условия акций',
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название акции')),
                ('description', models.TextField(verbose_name='Описание акции')),
                ('status', models.IntegerField(choices=[(1, 'ACTIVE'), (0, 'INACTIVE'), (2, 'POSTPONED')], verbose_name='Статус акции')),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=3)),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата начала акции')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания акции')),
                ('banner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.banner', verbose_name='Баннер')),
                ('condition', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='main.discountcondition', verbose_name='Условия акции')),
            ],
            options={
                'verbose_name': 'Акция',
                'verbose_name_plural': 'Акции',
                'ordering': ['status', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=96)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='images/food')),
                ('weight', models.FloatField(blank=True, default=0, null=True)),
                ('cooking_time', models.IntegerField(blank=True, default=0, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accepted_additions', models.ManyToManyField(blank=True, to='main.addition')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.foodcategory')),
            ],
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='foods',
            field=models.ManyToManyField(blank=True, to='main.food', verbose_name='Блюда'),
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='food_categories',
            field=models.ManyToManyField(blank=True, to='main.foodcategory', verbose_name='Категории блюд'),
        ),
        migrations.CreateModel(
            name='FoodFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('rate', models.FloatField(blank=True, default=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attachments', models.ManyToManyField(blank=True, to='main.attachment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.food')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('attachments', models.ManyToManyField(blank=True, to='main.attachment')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.chat')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.address')),
            ],
        ),
        migrations.AddField(
            model_name='chat',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.order'),
        ),
        migrations.CreateModel(
            name='Ordering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=1)),
                ('additions', models.ManyToManyField(blank=True, through='main.AdditionEnrollment', to='main.addition')),
                ('food', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.food')),
                ('main_order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.order')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='order_items',
            field=models.ManyToManyField(to='main.ordering'),
        ),
        migrations.AddField(
            model_name='additionenrollment',
            name='ordering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ordering'),
        ),
        migrations.CreateModel(
            name='SizeAndPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=48, verbose_name='Подпись к размеру')),
                ('size', models.IntegerField(choices=[(0, 'SMALL'), (1, 'MEDIUM'), (2, 'LARGE')], default=0, verbose_name='Размер')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('food_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.food')),
            ],
            options={
                'verbose_name': 'Размер и цена',
                'verbose_name_plural': 'Размеры и цены',
            },
        ),
        migrations.AddField(
            model_name='ordering',
            name='size',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.sizeandprice'),
        ),
        migrations.AddField(
            model_name='food',
            name='sizes_and_prices',
            field=models.ManyToManyField(to='main.sizeandprice'),
        ),
    ]
